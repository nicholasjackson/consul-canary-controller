"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[617],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,h=d["".concat(i,".").concat(m)]||d[m]||u[m]||r;return t?a.createElement(h,l(l({ref:n},c),{},{components:t})):a.createElement(h,l({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=d;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2550:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=t(7462),o=t(3366),r=(t(7294),t(3905)),l=["components"],s={sidebar_position:2},i="Installing the example application",p={unversionedId:"example_app",id:"example_app",title:"Installing the example application",description:"With the controller installed, lets install an example application and make a canary deployment.",source:"@site/docs/example_app.md",sourceDirName:".",slug:"/example_app",permalink:"/consul-release-controller/example_app",editUrl:"https://github.com/nicholasjackson/consul-release-controller/tree/main/docs/templates/shared/docs/example_app.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Getting Started on Kubernetes",permalink:"/consul-release-controller/"},next:{title:"Helm values",permalink:"/consul-release-controller/helm_values"}},c=[{value:"Default Consul config",id:"default-consul-config",children:[],level:2},{value:"Deploying Web",id:"deploying-web",children:[],level:2},{value:"Deploying the API",id:"deploying-the-api",children:[],level:2},{value:"Testing the example application",id:"testing-the-example-application",children:[],level:2},{value:"Configuring metrics collection",id:"configuring-metrics-collection",children:[],level:2},{value:"Adding the example Grafana Dashboard",id:"adding-the-example-grafana-dashboard",children:[{value:"Examining the Grafana dashboard",id:"examining-the-grafana-dashboard",children:[],level:3}],level:2},{value:"Generating simulated traffic",id:"generating-simulated-traffic",children:[],level:2},{value:"Creating the new Canary release",id:"creating-the-new-canary-release",children:[],level:2}],u={toc:c};function d(e){var n=e.components,s=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},u,s,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"installing-the-example-application"},"Installing the example application"),(0,r.kt)("p",null,"With the controller installed, lets install an example application and make a canary deployment."),(0,r.kt)("p",null,"The example application is a simple two tier application, exposed by Consul Ingress Gateway. The single instance of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Web")," application communicates to the upstream API using Consul Service Mesh.  All the metrics for the application are collected by Prometheus."),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(3694).Z,width:"731",height:"491"})),(0,r.kt)("h2",{id:"default-consul-config"},"Default Consul config"),(0,r.kt)("p",null,"Before you deploy the application it is important to ensure that you apply the Consul config CRDs that set the service type as HTTP and\nconfigure the intentions allowing access between services. Consul release controller automatically creates much of the configuration\nentries such as the ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceRouter"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceResolver"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceSplitter")," needed to control the flow of traffic to the application\nbut it does not create the ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceIntentions")," or the ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceDefaults"),". "),(0,r.kt)("p",null,"To use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceRouter"),", etc your service needs to be configured as a L7 aware HTTP or gRPC service. By defining these defaults, Consul\nensures that the necessary metrics emitted from the Envoy data plane are correctly configured to show detailed request level information\nthat Consul Release Controller uses to determine the health of your release."),(0,r.kt)("p",null,'Unlike most configuration that can be "hot reloaded" ',(0,r.kt)("inlineCode",{parentName:"p"},"ServiceDefaults")," are only read at pod start time and must be applied before you\ncreate the deployment."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Full listing for Consul configuration ",(0,r.kt)("b",null,"consul-config.yaml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"---\napiVersion: consul.hashicorp.com/v1alpha1\nkind: ServiceDefaults\nmetadata:\n  name: web\nspec:\n  protocol: http\n\n---\napiVersion: consul.hashicorp.com/v1alpha1\nkind: ServiceDefaults\nmetadata:\n  name: api\nspec:\n  protocol: http\n\n---\napiVersion: consul.hashicorp.com/v1alpha1\nkind: IngressGateway\nmetadata:\n  name: ingress-gateway\nspec:\n  listeners:\n    - port: 18080\n      protocol: http\n      services:\n        - name: web\n          hosts: [\"*\"]\n\n---\napiVersion: consul.hashicorp.com/v1alpha1\nkind: ServiceIntentions\nmetadata:\n  name: ingress-gateway\nspec:\n  destination:\n    name: ingress-gateway\n  sources:\n    - name: '*'\n      action: allow\n\n---\napiVersion: consul.hashicorp.com/v1alpha1\nkind: ServiceIntentions\nmetadata:\n  name: web\nspec:\n  destination:\n    name: web\n  sources:\n    - name: ingress-gateway\n      action: allow\n\n---\napiVersion: consul.hashicorp.com/v1alpha1\nkind: ServiceIntentions\nmetadata:\n  name: api\nspec:\n  destination:\n    name: api\n  sources:\n    - name: web\n      action: allow\n"))),(0,r.kt)("p",null,"Let's deploy the application, you can either, run the example direct from the examples in the GitHub repository or you can\nclone the repository ",(0,r.kt)("inlineCode",{parentName:"p"},"github.com/nicholasjackson/consul-release-controller")," and run the files locally."),(0,r.kt)("p",null,"For convenience, this example will use the files direct from GitHub."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply \\\n-f https://raw.githubusercontent.com/nicholasjackson/consul-release-controller/main/example/kubernetes/consul-config.yaml\n")),(0,r.kt)("p",null,"If successful you should see output like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"servicedefaults.consul.hashicorp.com/web created\nservicedefaults.consul.hashicorp.com/api created\ningressgateway.consul.hashicorp.com/ingress-gateway created\nserviceintentions.consul.hashicorp.com/ingress-gateway created\nserviceintentions.consul.hashicorp.com/web created\nserviceintentions.consul.hashicorp.com/api created\n")),(0,r.kt)("p",null,"Let's now deploy the first part of the application ",(0,r.kt)("inlineCode",{parentName:"p"},"Web"),"."),(0,r.kt)("h2",{id:"deploying-web"},"Deploying Web"),(0,r.kt)("p",null,"The Web application uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nicholasjackson/fake-service"},"Fake Service"),", an example\nmicroservice application that can be configured to call upstream services and simulate various performance criteria."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Full listing for Web Kubernetes deployment ",(0,r.kt)("b",null,"web.yaml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'---\napiVersion: v1\nkind: Service\nmetadata:\n  name: web\n  labels:\n    app: metrics\nspec:\n  selector:\n    app: web\n  ports:\n    - name: http\n      protocol: TCP\n      port: 9090\n      targetPort: 9090\n    - name: metrics # prom scraping port\n      protocol: TCP\n      port: 20200\n      targetPort: 20200\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: web\nautomountServiceAccountToken: false\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-deployment\n  labels:\n    app: web_v1\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: web\n  template:\n    metadata:\n      labels:\n        app: web\n        metrics: enabled\n      annotations:\n        consul.hashicorp.com/connect-inject: \'true\'\n        consul.hashicorp.com/connect-service-upstreams: \'api:9091\'\n        #consul.hashicorp.com/transparent-proxy: \'true\'\n        #consul.hashicorp.com/transparent-proxy-overwrite-probes: \'true\'\n        #consul.hashicorp.com/transparent-proxy-exclude-inbound-ports: \'9090\'\n    spec:  \n      serviceAccountName: web\n      automountServiceAccountToken: true\n      containers:\n        - name: web\n          image: nicholasjackson/fake-service:v0.23.1\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: 9090\n          env:\n            - name: "NAME"\n              value: "WEB"\n            - name: "LISTEN_ADDR"\n              value: "0.0.0.0:9090"\n            - name: "UPSTREAM_URIS"\n              value: "http://localhost:9091"\n            - name: "TIMING_50_PERCENTILE"\n              value: "10ms"\n            - name: "TRACING_ZIPKIN"\n              value: "http://tempo:9411"\n            - name: "READY_CHECK_RESPONSE_DELAY"\n              value: "10s"\n          readinessProbe:\n            httpGet:\n              path: /ready\n              port: 9090\n            periodSeconds: 5\n            initialDelaySeconds: 5\n          livenessProbe:\n            httpGet:\n              path: /health\n              port: 9090\n            periodSeconds: 5\n            initialDelaySeconds: 5\n'))),(0,r.kt)("p",null,"Let's deploy the application, using the files direct from GitHub."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply \\\n-f https://raw.githubusercontent.com/nicholasjackson/consul-release-controller/main/example/kubernetes/web.yaml\n")),(0,r.kt)("p",null,"If successful you should see output like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"service/web created\nserviceaccount/web created\ndeployment.apps/web-deployment created\n")),(0,r.kt)("p",null,"You should also see the pod running in Kubernetes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"\u279c kubectl get pods\nNAME                              READY   STATUS    RESTARTS   AGE\nweb-deployment-575887cd4c-ckd8k   2/2     Running   0          4m35s\n")),(0,r.kt)("h2",{id:"deploying-the-api"},"Deploying the API"),(0,r.kt)("p",null,"Now that web is running let's deploy the API service, API will be the service that we are going to perform the canary deployment with."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Full listing for API Kubernetes deployment ",(0,r.kt)("b",null,"api.yaml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'---\napiVersion: v1\nkind: Service\nmetadata:\n  name: api\n  namespace: default\n  labels:\n    app: metrics\nspec:\n  selector:\n    app: api\n  ports:\n    - name: http\n      protocol: TCP\n      port: 9090\n      targetPort: 9090\n    - name: metrics # prom scraping port\n      protocol: TCP\n      port: 20200\n      targetPort: 20200\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: api\n  namespace: default\nautomountServiceAccountToken: false\n\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: api-deployment\n  namespace: default\n  labels:\n    app: api_v1\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: api\n  template:\n    metadata:\n      labels:\n        app: api\n        metrics: enabled\n      annotations:\n        consul.hashicorp.com/connect-inject: \'true\'\n        #consul.hashicorp.com/transparent-proxy: \'true\'\n        #consul.hashicorp.com/transparent-proxy-overwrite-probes: \'true\'\n    spec:  \n      serviceAccountName: api\n      automountServiceAccountToken: true\n      containers:\n        - name: api\n          image: nicholasjackson/fake-service:v0.23.1\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: 9090\n          env:\n            - name: "NAME"\n              value: "API V1"\n            - name: "LISTEN_ADDR"\n              value: "0.0.0.0:9090"\n            - name: "TIMING_50_PERCENTILE"\n              value: "10ms"\n            - name: "TRACING_ZIPKIN"\n              value: "http://tempo:9411"\n            - name: "READY_CHECK_RESPONSE_DELAY"\n              value: "10s"\n          readinessProbe:\n            httpGet:\n              path: /ready\n              port: 9090\n            periodSeconds: 5\n            initialDelaySeconds: 5\n          livenessProbe:\n            httpGet:\n              path: /health\n              port: 9090\n            periodSeconds: 5\n            initialDelaySeconds: 5\n'))),(0,r.kt)("p",null,"As you did with the Web application, let's create the deployment and service for the API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply \\\n-f https://raw.githubusercontent.com/nicholasjackson/consul-release-controller/main/example/kubernetes/api.yaml\n")),(0,r.kt)("p",null,"If successful you should see output like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"service/web created\nserviceaccount/web created\ndeployment.apps/web-deployment created\n")),(0,r.kt)("p",null,"When you run the ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl get pods")," command this time you should see the single web pod and three API pods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"\u279c kubectl get pods\nNAME                              READY   STATUS    RESTARTS   AGE\nweb-deployment-575887cd4c-ckd8k   2/2     Running   0          10m\napi-deployment-54dc89bcc9-8sdr5   2/2     Running   0          7s\napi-deployment-54dc89bcc9-9dflf   2/2     Running   0          7s\napi-deployment-54dc89bcc9-9rg59   2/2     Running   0          7s\n")),(0,r.kt)("p",null,"These will also be visible in the Consul UI."),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(720).Z,width:"1414",height:"535"})),(0,r.kt)("h2",{id:"testing-the-example-application"},"Testing the example application"),(0,r.kt)("p",null,"Now that the example has been deployed, let's test that it is working correctly."),(0,r.kt)("p",null,"To access the application, let's use ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl port-forward")," to expose the Kubernetes web service to the local machine."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl port-forward svc/web 29090:9090\n")),(0,r.kt)("p",null,"You should see output from kubectl that looks like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"Forwarding from 127.0.0.1:29090 -> 9090\nForwarding from [::1]:29090 -> 9090\n")),(0,r.kt)("p",null,"You can test the application is working by using ",(0,r.kt)("inlineCode",{parentName:"p"},"cURL")," in another terminal, run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl http://localhost:29090\n")),(0,r.kt)("p",null,"Fake Service produces a detailed JSON payload echoing the details of your request, it also shows the details of any\nupstream calls that it made. If the application is working correctly you will see the ",(0,r.kt)("inlineCode",{parentName:"p"},"upstream_calls")," section that show\nthe response from the upstream API service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "WEB",\n  "uri": "/",\n  "type": "HTTP",\n  "ip_addresses": [\n    "10.42.0.33"\n  ],\n  "start_time": "2022-02-22T13:38:47.026571",\n  "end_time": "2022-02-22T13:38:47.039223",\n  "duration": "12.6529ms",\n  "body": "Hello World",\n  "upstream_calls": {\n    "http://localhost:9091": {\n      "name": "API V1",\n      "uri": "http://localhost:9091",\n      "type": "HTTP",\n      "ip_addresses": [\n        "10.42.0.35"\n      ],\n      "start_time": "2022-02-22T13:38:47.028300",\n      "end_time": "2022-02-22T13:38:47.038551",\n      "duration": "10.250688ms",\n      "headers": {\n        "Content-Length": "256",\n        "Content-Type": "text/plain; charset=utf-8",\n        "Date": "Tue, 22 Feb 2022 13:38:47 GMT",\n        "Server": "envoy",\n        "X-Envoy-Upstream-Service-Time": "11"\n      },\n      "body": "Hello World",\n      "code": 200\n    }\n  },\n  "code": 200\n}\n')),(0,r.kt)("p",null,"If you prefer, you can also open the Fake Service UI in your browser ",(0,r.kt)("a",{parentName:"p",href:"http://localhost:29090"},"http://localhost:29090")),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(3959).Z,width:"949",height:"726"})),(0,r.kt)("h2",{id:"configuring-metrics-collection"},"Configuring metrics collection"),(0,r.kt)("p",null,"The release controller queries Prometheus to determine the health of your application,\ncan be configured to scrape the services by creating ",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceMonitor")," CRDs, if you have prometheus installed\nto your cluster using the prometheus operator in the ",(0,r.kt)("inlineCode",{parentName:"p"},"monitoring")," namespace then you can use the example\n",(0,r.kt)("inlineCode",{parentName:"p"},"ServiceMonitor")," configuration listed below."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Full listing for deployment ",(0,r.kt)("b",null,"metrics.yaml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"---\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    release: prometheus\n  name: example-app\n  namespace: monitoring\nspec:\n  endpoints:\n  - interval: 15s\n    port: metrics\n  jobLabel: example-app\n  namespaceSelector:\n    matchNames:\n    - default\n  selector:\n    matchLabels:\n      app: metrics\n"))),(0,r.kt)("p",null,"If you have a different setup then you need to ensure that the metrics port 20200 for both the Web and API Kubernetes\nservices are scraped by prometheus."),(0,r.kt)("p",null,"Let's apply this configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply \\\n-f https://raw.githubusercontent.com/nicholasjackson/consul-release-controller/main/example/kubernetes/metrics.yaml\n")),(0,r.kt)("p",null,"Just before we get into creating the new release, let's add a dashboard and some automated traffic to the service."),(0,r.kt)("h2",{id:"adding-the-example-grafana-dashboard"},"Adding the example Grafana Dashboard"),(0,r.kt)("p",null,"To visualize the traffic flow in the example application, you can deploy the example dashboard. The file\n",(0,r.kt)("inlineCode",{parentName:"p"},"application-dashboard.yaml")," in the examples directory uses the Grafana controller installed by the Grafana\nHelm chart that inspects ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfigMap")," resources in the same namespace where the Grafana install is and automatically\nloads the dashboard json into Grafana."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: application-dashboard\n  namespace: monitoring\n  labels:\n     grafana_dashboard: "1"\ndata:\n  api.json: |\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Full listing for API Kubernetes deployment ",(0,r.kt)("b",null,"application-dashboard.yaml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: application-dashboard\n  namespace: monitoring\n  labels:\n     grafana_dashboard: "1"\ndata:\n  api.json: |\n    {\n      "annotations": {\n        "list": [\n          {\n            "builtIn": 1,\n            "datasource": "-- Grafana --",\n            "enable": true,\n            "hide": true,\n            "iconColor": "rgba(0, 211, 255, 1)",\n            "name": "Annotations & Alerts",\n            "target": {\n              "limit": 100,\n              "matchAny": false,\n              "tags": [],\n              "type": "dashboard"\n            },\n            "type": "dashboard"\n          },\n          {\n            "datasource": "Prometheus",\n            "enable": true,\n            "expr": "consul_release_controller_state_changed_start_seconds{release=\\"api\\",state!=\\"state_idle\\"}",\n            "iconColor": "red",\n            "name": "State Change",\n            "step": "",\n            "tagKeys": "state",\n            "titleFormat": "state"\n          }\n        ]\n      },\n      "editable": true,\n      "fiscalYearStartMonth": 0,\n      "gnetId": null,\n      "graphTooltip": 0,\n      "links": [],\n      "liveNow": false,\n      "panels": [\n        {\n          "datasource": null,\n          "description": "",\n          "fieldConfig": {\n            "defaults": {\n              "color": {\n                "mode": "thresholds"\n              },\n              "mappings": [],\n              "noValue": "0",\n              "thresholds": {\n                "mode": "absolute",\n                "steps": [\n                  {\n                    "color": "blue",\n                    "value": null\n                  },\n                  {\n                    "color": "red",\n                    "value": 80\n                  }\n                ]\n              }\n            },\n            "overrides": []\n          },\n          "gridPos": {\n            "h": 8,\n            "w": 8,\n            "x": 0,\n            "y": 0\n          },\n          "id": 14,\n          "options": {\n            "colorMode": "background",\n            "graphMode": "none",\n            "justifyMode": "auto",\n            "orientation": "auto",\n            "reduceOptions": {\n              "calcs": [\n                "lastNotNull"\n              ],\n              "fields": "",\n              "values": false\n            },\n            "text": {},\n            "textMode": "auto"\n          },\n          "pluginVersion": "8.2.3",\n          "targets": [\n            {\n              "exemplar": true,\n              "expr": "count(count(prober_probe_total{pod=~\\"web-deployment-.*\\", container=\\"web\\", result=\\"successful\\", probe_type=\\"Liveness\\"}) by (pod))",\n              "interval": "",\n              "legendFormat": "",\n              "refId": "A"\n            }\n          ],\n          "title": "Web Pods Running",\n          "type": "stat"\n        },\n        {\n          "datasource": null,\n          "description": "",\n          "fieldConfig": {\n            "defaults": {\n              "color": {\n                "mode": "thresholds"\n              },\n              "mappings": [],\n              "noValue": "0",\n              "thresholds": {\n                "mode": "absolute",\n                "steps": [\n                  {\n                    "color": "green",\n                    "value": null\n                  },\n                  {\n                    "color": "red",\n                    "value": 80\n                  }\n                ]\n              }\n            },\n            "overrides": []\n          },\n          "gridPos": {\n            "h": 8,\n            "w": 8,\n            "x": 8,\n            "y": 0\n          },\n          "id": 15,\n          "options": {\n            "colorMode": "background",\n            "graphMode": "none",\n            "justifyMode": "auto",\n            "orientation": "auto",\n            "reduceOptions": {\n              "calcs": [\n                "last"\n              ],\n              "fields": "",\n              "values": false\n            },\n            "text": {},\n            "textMode": "auto"\n          },\n          "pluginVersion": "8.2.3",\n          "targets": [\n            {\n              "exemplar": true,\n              "expr": "count(count(prober_probe_total{pod=~\\"api-deployment-primary-.*\\", container=\\"api\\", result=\\"successful\\", probe_type=\\"Liveness\\"}) by (pod))",\n              "interval": "",\n              "legendFormat": "",\n              "refId": "A"\n            }\n          ],\n          "title": "API Primary Pods Running",\n          "type": "stat"\n        },\n        {\n          "datasource": null,\n          "description": "",\n          "fieldConfig": {\n            "defaults": {\n              "color": {\n                "mode": "thresholds"\n              },\n              "mappings": [],\n              "noValue": "0",\n              "thresholds": {\n                "mode": "absolute",\n                "steps": [\n                  {\n                    "color": "yellow",\n                    "value": null\n                  },\n                  {\n                    "color": "red",\n                    "value": 80\n                  }\n                ]\n              }\n            },\n            "overrides": []\n          },\n          "gridPos": {\n            "h": 8,\n            "w": 8,\n            "x": 16,\n            "y": 0\n          },\n          "id": 16,\n          "options": {\n            "colorMode": "background",\n            "graphMode": "none",\n            "justifyMode": "center",\n            "orientation": "auto",\n            "reduceOptions": {\n              "calcs": [\n                "last"\n              ],\n              "fields": "",\n              "values": false\n            },\n            "text": {},\n            "textMode": "auto"\n          },\n          "pluginVersion": "8.2.3",\n          "targets": [\n            {\n              "exemplar": true,\n              "expr": "count(count(prober_probe_total{pod!~\\"api-deployment-primary-.*\\", container=\\"api\\", result=\\"successful\\", probe_type=\\"Liveness\\"}) by (pod))",\n              "interval": "",\n              "legendFormat": "",\n              "refId": "A"\n            }\n          ],\n          "title": "API Canary Pods Running",\n          "type": "stat"\n        },\n        {\n          "datasource": null,\n          "description": "",\n          "fieldConfig": {\n            "defaults": {\n              "color": {\n                "mode": "palette-classic"\n              },\n              "custom": {\n                "axisLabel": "",\n                "axisPlacement": "auto",\n                "axisSoftMin": 2,\n                "barAlignment": 0,\n                "drawStyle": "line",\n                "fillOpacity": 10,\n                "gradientMode": "none",\n                "hideFrom": {\n                  "legend": false,\n                  "tooltip": false,\n                  "viz": false\n                },\n                "lineInterpolation": "linear",\n                "lineWidth": 1,\n                "pointSize": 5,\n                "scaleDistribution": {\n                  "type": "linear"\n                },\n                "showPoints": "never",\n                "spanNulls": false,\n                "stacking": {\n                  "group": "A",\n                  "mode": "none"\n                },\n                "thresholdsStyle": {\n                  "mode": "off"\n                }\n              },\n              "mappings": [],\n              "thresholds": {\n                "mode": "absolute",\n                "steps": [\n                  {\n                    "color": "green",\n                    "value": null\n                  },\n                  {\n                    "color": "red",\n                    "value": 80\n                  }\n                ]\n              },\n              "unit": "short"\n            },\n            "overrides": []\n          },\n          "gridPos": {\n            "h": 10,\n            "w": 17,\n            "x": 0,\n            "y": 8\n          },\n          "id": 2,\n          "options": {\n            "legend": {\n              "calcs": [\n                "lastNotNull",\n                "sum"\n              ],\n              "displayMode": "table",\n              "placement": "bottom"\n            },\n            "tooltip": {\n              "mode": "single"\n            }\n          },\n          "pluginVersion": "8.2.3",\n          "targets": [\n            {\n              "exemplar": true,\n              "expr": "sum(rate(envoy_http_18080_downstream_rq_xx{pod=~\\"consul-ingress-gateway.*\\", envoy_response_code_class=~\\"2|5\\"}[$__rate_interval])) by (envoy_response_code_class)",\n              "hide": false,\n              "interval": "",\n              "legendFormat": "Downstream Response Code {{envoy_response_code_class}}xx",\n              "refId": "A"\n            },\n            {\n              "exemplar": true,\n              "expr": "sum(rate(envoy_cluster_external_upstream_rq{consul_source_service=\\"web\\",consul_destination_service=\\"api\\"}[$__rate_interval])) by (envoy_response_code)",\n              "hide": false,\n              "interval": "",\n              "legendFormat": "API Upstream Response Code {{envoy_response_code}}",\n              "refId": "B"\n            }\n          ],\n          "timeFrom": null,\n          "timeShift": null,\n          "title": "Web Response",\n          "type": "timeseries"\n        },\n        {\n          "datasource": null,\n          "description": "",\n          "fieldConfig": {\n            "defaults": {\n              "mappings": [],\n              "max": 1,\n              "noValue": "0",\n              "thresholds": {\n                "mode": "absolute",\n                "steps": [\n                  {\n                    "color": "green",\n                    "value": null\n                  },\n                  {\n                    "color": "red",\n                    "value": 0\n                  }\n                ]\n              }\n            },\n            "overrides": []\n          },\n          "gridPos": {\n            "h": 10,\n            "w": 7,\n            "x": 17,\n            "y": 8\n          },\n          "id": 11,\n          "options": {\n            "orientation": "auto",\n            "reduceOptions": {\n              "calcs": [\n                "sum"\n              ],\n              "fields": "",\n              "values": false\n            },\n            "showThresholdLabels": false,\n            "showThresholdMarkers": true,\n            "text": {}\n          },\n          "pluginVersion": "8.2.3",\n          "targets": [\n            {\n              "exemplar": true,\n              "expr": "sum(round(increase(envoy_http_18080_downstream_rq_xx{pod=~\\"consul-ingress-gateway.*\\", envoy_response_code_class=\\"5\\"}[$__rate_interval]),1))",\n              "interval": "",\n              "legendFormat": "",\n              "refId": "A"\n            }\n          ],\n          "timeFrom": null,\n          "timeShift": null,\n          "title": "Downstream error count",\n          "type": "gauge"\n        },\n        {\n          "datasource": null,\n          "fieldConfig": {\n            "defaults": {\n              "color": {\n                "mode": "palette-classic"\n              },\n              "custom": {\n                "axisLabel": "",\n                "axisPlacement": "auto",\n                "barAlignment": 0,\n                "drawStyle": "line",\n                "fillOpacity": 10,\n                "gradientMode": "none",\n                "hideFrom": {\n                  "legend": false,\n                  "tooltip": false,\n                  "viz": false\n                },\n                "lineInterpolation": "linear",\n                "lineWidth": 1,\n                "pointSize": 5,\n                "scaleDistribution": {\n                  "type": "linear"\n                },\n                "showPoints": "never",\n                "spanNulls": true,\n                "stacking": {\n                  "group": "A",\n                  "mode": "none"\n                },\n                "thresholdsStyle": {\n                  "mode": "off"\n                }\n              },\n              "mappings": [],\n              "min": 0,\n              "thresholds": {\n                "mode": "absolute",\n                "steps": [\n                  {\n                    "color": "green",\n                    "value": null\n                  },\n                  {\n                    "color": "red",\n                    "value": 80\n                  }\n                ]\n              },\n              "unit": "short"\n            },\n            "overrides": [\n              {\n                "matcher": {\n                  "id": "byName",\n                  "options": "Primary - 200"\n                },\n                "properties": [\n                  {\n                    "id": "color",\n                    "value": {\n                      "fixedColor": "#73BF69",\n                      "mode": "fixed"\n                    }\n                  }\n                ]\n              },\n              {\n                "matcher": {\n                  "id": "byName",\n                  "options": "Canary - 200"\n                },\n                "properties": [\n                  {\n                    "id": "color",\n                    "value": {\n                      "fixedColor": "#FADE2A",\n                      "mode": "fixed"\n                    }\n                  }\n                ]\n              }\n            ]\n          },\n          "gridPos": {\n            "h": 11,\n            "w": 17,\n            "x": 0,\n            "y": 18\n          },\n          "id": 4,\n          "options": {\n            "legend": {\n              "calcs": [\n                "mean",\n                "lastNotNull",\n                "max",\n                "min",\n                "sum"\n              ],\n              "displayMode": "table",\n              "placement": "bottom"\n            },\n            "tooltip": {\n              "mode": "single"\n            }\n          },\n          "pluginVersion": "8.2.3",\n          "targets": [\n            {\n              "exemplar": true,\n              "expr": "sum by (envoy_response_code) (rate(envoy_cluster_upstream_rq{pod!~\\"api-deployment-primary.*\\", namespace=\\"default\\", envoy_cluster_name=\\"local_app\\", pod=~\\"api.*\\"}[$__rate_interval]))",\n              "interval": "",\n              "legendFormat": "Canary - {{envoy_response_code}}",\n              "refId": "A"\n            },\n            {\n              "exemplar": true,\n              "expr": "sum by (envoy_response_code) (rate(envoy_cluster_upstream_rq{pod=~\\"api-deployment-primary.*\\", namespace=\\"default\\", envoy_cluster_name=\\"local_app\\", pod=~\\"api.*\\"}[$__rate_interval]))",\n              "interval": "",\n              "legendFormat": "Primary - {{envoy_response_code}}",\n              "refId": "B"\n            }\n          ],\n          "timeFrom": null,\n          "timeShift": null,\n          "title": "API Request per Second",\n          "type": "timeseries"\n        },\n        {\n          "datasource": null,\n          "fieldConfig": {\n            "defaults": {\n              "mappings": [],\n              "noValue": "0",\n              "thresholds": {\n                "mode": "absolute",\n                "steps": [\n                  {\n                    "color": "green",\n                    "value": null\n                  },\n                  {\n                    "color": "red",\n                    "value": 1\n                  }\n                ]\n              }\n            },\n            "overrides": []\n          },\n          "gridPos": {\n            "h": 11,\n            "w": 7,\n            "x": 17,\n            "y": 18\n          },\n          "id": 6,\n          "options": {\n            "orientation": "auto",\n            "reduceOptions": {\n              "calcs": [\n                "lastNotNull"\n              ],\n              "fields": "",\n              "values": false\n            },\n            "showThresholdLabels": false,\n            "showThresholdMarkers": true,\n            "text": {}\n          },\n          "pluginVersion": "8.2.3",\n          "targets": [\n            {\n              "exemplar": true,\n              "expr": "sum(round(increase(envoy_cluster_upstream_rq_retry{consul_destination_service=\\"api\\"}[$__rate_interval]),1))",\n              "interval": "",\n              "legendFormat": "",\n              "refId": "A"\n            }\n          ],\n          "timeFrom": null,\n          "timeShift": null,\n          "title": "Retries per Second",\n          "type": "gauge"\n        },\n        {\n          "datasource": null,\n          "fieldConfig": {\n            "defaults": {\n              "color": {\n                "mode": "palette-classic"\n              },\n              "custom": {\n                "axisLabel": "",\n                "axisPlacement": "auto",\n                "barAlignment": 0,\n                "drawStyle": "line",\n                "fillOpacity": 10,\n                "gradientMode": "none",\n                "hideFrom": {\n                  "legend": false,\n                  "tooltip": false,\n                  "viz": false\n                },\n                "lineInterpolation": "linear",\n                "lineStyle": {\n                  "fill": "solid"\n                },\n                "lineWidth": 1,\n                "pointSize": 5,\n                "scaleDistribution": {\n                  "type": "linear"\n                },\n                "showPoints": "auto",\n                "spanNulls": false,\n                "stacking": {\n                  "group": "A",\n                  "mode": "normal"\n                },\n                "thresholdsStyle": {\n                  "mode": "off"\n                }\n              },\n              "mappings": [],\n              "min": 0,\n              "thresholds": {\n                "mode": "absolute",\n                "steps": [\n                  {\n                    "color": "green",\n                    "value": null\n                  },\n                  {\n                    "color": "red",\n                    "value": 80\n                  }\n                ]\n              },\n              "unit": "short"\n            },\n            "overrides": [\n              {\n                "matcher": {\n                  "id": "byName",\n                  "options": "Web Pods"\n                },\n                "properties": [\n                  {\n                    "id": "color",\n                    "value": {\n                      "fixedColor": "blue",\n                      "mode": "fixed"\n                    }\n                  }\n                ]\n              },\n              {\n                "matcher": {\n                  "id": "byName",\n                  "options": "API Canary Pods"\n                },\n                "properties": [\n                  {\n                    "id": "color",\n                    "value": {\n                      "fixedColor": "#FADE2A",\n                      "mode": "fixed"\n                    }\n                  }\n                ]\n              },\n              {\n                "matcher": {\n                  "id": "byName",\n                  "options": "API Primary Pods"\n                },\n                "properties": [\n                  {\n                    "id": "color",\n                    "value": {\n                      "fixedColor": "green",\n                      "mode": "fixed"\n                    }\n                  }\n                ]\n              }\n            ]\n          },\n          "gridPos": {\n            "h": 11,\n            "w": 17,\n            "x": 0,\n            "y": 29\n          },\n          "id": 17,\n          "options": {\n            "legend": {\n              "calcs": [\n                "mean",\n                "lastNotNull",\n                "max",\n                "min",\n                "sum"\n              ],\n              "displayMode": "table",\n              "placement": "bottom"\n            },\n            "tooltip": {\n              "mode": "single"\n            }\n          },\n          "pluginVersion": "8.2.3",\n          "targets": [\n            {\n              "exemplar": true,\n              "expr": "count(count(prober_probe_total{pod=~\\"web-deployment-.*\\", container=\\"web\\", result=\\"successful\\", probe_type=\\"Liveness\\"}) by (pod))",\n              "interval": "",\n              "legendFormat": "Web Pods",\n              "refId": "A"\n            },\n            {\n              "exemplar": true,\n              "expr": "count(prober_probe_total{pod!~\\"api-deployment-primary-.*\\", container=\\"api\\", result=\\"successful\\", probe_type=\\"Liveness\\"})",\n              "interval": "",\n              "legendFormat": "API Canary Pods",\n              "refId": "B"\n            },\n            {\n              "exemplar": true,\n              "expr": "count(prober_probe_total{pod=~\\"api-deployment-primary-.*\\", container=\\"api\\", result=\\"successful\\", probe_type=\\"Liveness\\"})",\n              "hide": false,\n              "interval": "",\n              "legendFormat": "API Primary Pods",\n              "refId": "C"\n            }\n          ],\n          "timeFrom": null,\n          "timeShift": null,\n          "title": "Running Pods",\n          "type": "timeseries"\n        },\n        {\n          "datasource": null,\n          "fieldConfig": {\n            "defaults": {\n              "mappings": [],\n              "noValue": "0",\n              "thresholds": {\n                "mode": "absolute",\n                "steps": [\n                  {\n                    "color": "green",\n                    "value": null\n                  },\n                  {\n                    "color": "red",\n                    "value": 1\n                  }\n                ]\n              }\n            },\n            "overrides": []\n          },\n          "gridPos": {\n            "h": 11,\n            "w": 7,\n            "x": 17,\n            "y": 29\n          },\n          "id": 18,\n          "options": {\n            "orientation": "auto",\n            "reduceOptions": {\n              "calcs": [\n                "lastNotNull"\n              ],\n              "fields": "",\n              "values": false\n            },\n            "showThresholdLabels": false,\n            "showThresholdMarkers": true,\n            "text": {}\n          },\n          "pluginVersion": "8.2.3",\n          "targets": [\n            {\n              "exemplar": true,\n              "expr": "sum(envoy_cluster_outlier_detection_ejections_active{consul_destination_service=\\"api\\"})",\n              "interval": "",\n              "legendFormat": "",\n              "refId": "A"\n            }\n          ],\n          "timeFrom": null,\n          "timeShift": null,\n          "title": "API Outlier Ejection",\n          "type": "gauge"\n        },\n        {\n          "datasource": "Loki",\n          "gridPos": {\n            "h": 10,\n            "w": 24,\n            "x": 0,\n            "y": 40\n          },\n          "id": 10,\n          "options": {\n            "dedupStrategy": "none",\n            "enableLogDetails": true,\n            "prettifyLogMessage": false,\n            "showCommonLabels": false,\n            "showLabels": false,\n            "showTime": false,\n            "sortOrder": "Descending",\n            "wrapLogMessage": false\n          },\n          "targets": [\n            {\n              "expr": "{app=\\"web\\"}",\n              "refId": "A"\n            }\n          ],\n          "title": "Web Logs",\n          "type": "logs"\n        },\n        {\n          "datasource": "Loki",\n          "gridPos": {\n            "h": 10,\n            "w": 24,\n            "x": 0,\n            "y": 50\n          },\n          "id": 12,\n          "options": {\n            "dedupStrategy": "none",\n            "enableLogDetails": true,\n            "prettifyLogMessage": false,\n            "showCommonLabels": false,\n            "showLabels": false,\n            "showTime": false,\n            "sortOrder": "Descending",\n            "wrapLogMessage": false\n          },\n          "targets": [\n            {\n              "expr": "{app=~\\"api.*\\"}",\n              "refId": "A"\n            }\n          ],\n          "title": "API Logs",\n          "type": "logs"\n        }\n      ],\n      "refresh": "10s",\n      "schemaVersion": 31,\n      "style": "dark",\n      "tags": [],\n      "templating": {\n        "list": []\n      },\n      "time": {\n        "from": "now-5m",\n        "to": "now"\n      },\n      "timepicker": {},\n      "timezone": "",\n      "title": "Application Dashboard",\n      "uid": "sdfsdfsdf",\n      "version": 1\n    }\n'))),(0,r.kt)("p",null,"This tutorial assumes that you have setup your cluster as defined in the prerequisites so we can apply this configuration direct\nfrom the example repo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply \\\n-f https://raw.githubusercontent.com/nicholasjackson/consul-release-controller/main/example/kubernetes/metrics.yaml\n")),(0,r.kt)("p",null,"If you are not using this feature on your cluster you can manually add the JSON by using Grafana's Import dashboard feature in the UI."),(0,r.kt)("h3",{id:"examining-the-grafana-dashboard"},"Examining the Grafana dashboard"),(0,r.kt)("p",null,"If you open the dashboard in Grafana you will see three panels at the top, this shows the number of running pods for the example app."),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(1062).Z,width:"1857",height:"310"})),(0,r.kt)("p",null,"At present this should show a single ",(0,r.kt)("inlineCode",{parentName:"p"},"Web")," pod and three ",(0,r.kt)("inlineCode",{parentName:"p"},"API Canary")," pods, the reason for this is the way that Consul Release controller\nnames pods that are under it's control. When a release is created Consul Release Controller duplicates the original deployment and renames\nit appending the suffix ",(0,r.kt)("inlineCode",{parentName:"p"},"-primary"),". It then scales the original deployment to ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),", whenever you deploy a new version of your application\nConsul Release Controller treats this as the canary and will automatically control the traffic split between the primary and the canary.\nSince you have not yet created a release the dashboard is showing 3 ",(0,r.kt)("inlineCode",{parentName:"p"},"API Canary")," pods as this is the original deployment. You will see this\nchange as soon as you create a deployment."),(0,r.kt)("p",null,"To effectively measure the health of your release, Consul Release Controller looks at the metrics emitted from Consul Service Mesh,\nin a production system it is assumed that you will have constant traffic. However in the example app you have to manually generate the traffic."),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(4299).Z,width:"1305",height:"796"})),(0,r.kt)("p",null,"Let's see how you can deploy a simple load generation application to simulate user traffic in the example application."),(0,r.kt)("h2",{id:"generating-simulated-traffic"},"Generating simulated traffic"),(0,r.kt)("p",null,"To simulate traffic in the example application, you can deploy the ",(0,r.kt)("inlineCode",{parentName:"p"},"loadtest.yaml")," configuration, this creates simulated traffic of 10 user\nrequests per second using ",(0,r.kt)("a",{parentName:"p",href:"https://k6.io/"},"k6"),"."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Full listing for load generation ",(0,r.kt)("b",null,"loadtest.yaml")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"---\n# Service to expose loadtest for scraping\napiVersion: v1\nkind: Service\nmetadata:\n  name: loadtest-metrics\n  namespace: default\n  labels:\n    app: metrics\nspec:\n  selector:\n    group: loadtest\n  ports:\n  - name: metrics\n    protocol: TCP\n    port: 9102\n    targetPort: 9102\n\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: load-generator\n  namespace: default\ndata:\n  load_test.js: |\n    import http from 'k6/http';\n    import { sleep, check } from 'k6';\n    import { Counter } from 'k6/metrics';\n    import { randomIntBetween } from 'https://jslib.k6.io/k6-utils/1.1.0/index.js';\n\n    // A simple counter for http requests\n    export const requests = new Counter('http_reqs');\n    // you can specify stages of your test (ramp up/down patterns) through the options object\n    // target is the number of VUs you are aiming for\n    export const options = {\n      vus: 10,\n      duration: '30m',\n    };\n\n      //maxVUs: 10,\n      //startRate: 1,\n      //timeUnit: '1s',\n      //stages: [\n      //  { target: 1, duration: '59s' },\n      //  { target: 10, duration: '120s' },\n      //  { target: 10, duration: '60s' },\n      //  { target: 0, duration: '1s' },\n      //  { target: 0, duration: '59s' },\n      //],\n    export default function () {\n      var payload = 'Replicants are like any other machine, are either a benefit or a hazard'\n      var params = {\n        headers: {\n          'Content-Type': 'text/plain',\n        },\n      }\n      \n      // our HTTP request, note that we are saving the response to res, which can be accessed later\n      const res = http.get('http://consul-ingress-gateway.consul.svc:18080');\n      const checkRes = check(res, {\n        'status is 200': (r) => r.status === 200,\n      });\n\n      sleep(randomIntBetween(0.2, 1.5));\n    }\n\n\n---\n# Load test\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: load-generator-deployment\n  labels:\n    app: web\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: load-generator\n  template:\n    metadata:\n      labels:\n        group: loadtest\n        app: load-generator\n    spec:\n      containers:\n      - name: load-generator\n        image: loadimpact/k6\n        command: [\"k6\", \"run\", \"--out\", \"statsd\", \"/etc/config/load_test.js\"]\n        env:\n          - name: K6_STATSD_ADDR\n            value: localhost:9125\n        volumeMounts:\n        - name: config-volume\n          mountPath: /etc/config\n      - name: statsd-exporter\n        image: prom/statsd-exporter \n        ports:\n          - containerPort: 9102\n      volumes:\n        - name: config-volume\n          configMap:\n            name: load-generator\n"))),(0,r.kt)("p",null,"The load test is configured to send load to the Consul Ingress Gateway ",(0,r.kt)("inlineCode",{parentName:"p"},"consul-ingress-gateway.consul.svc")," using the port ",(0,r.kt)("inlineCode",{parentName:"p"},"18080"),"\nif your setup uses a different port for the ingress gateway or you have installed it in a different namespace, you will need\nto change the settings in ",(0,r.kt)("inlineCode",{parentName:"p"},"loadtest.yaml")," before applying the configuration."),(0,r.kt)("p",null,"Assuming you are using the Shipyard cluster or have configured your own setup using the example settings in the prerequi"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl apply \\\n-f https://raw.githubusercontent.com/nicholasjackson/consul-release-controller/main/example/kubernetes/metrics.yaml\n")),(0,r.kt)("p",null,"After applying the load test configuration you should start to see some activity in your Grafana dashboard."),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(7596).Z,width:"1310",height:"801"})),(0,r.kt)("p",null,"Let's now setup Consul Release Controller to monitor and perform canary releases for your ",(0,r.kt)("inlineCode",{parentName:"p"},"API")," deployment."),(0,r.kt)("h2",{id:"creating-the-new-canary-release"},"Creating the new Canary release"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'---\napiVersion: consul-release-controller.nicholasjackson.io/v1\nkind: Release\nmetadata:\n  name: api\n  namespace: default\nspec:\n  releaser:\n    pluginName: "consul"\n    config:\n      consulService: "api"\n  runtime:\n    pluginName: "kubernetes"\n    config:\n      deployment: "api-deployment"\n  strategy:\n    pluginName: "canary"\n    config:\n      initialDelay: "30s"\n      interval: "30s"\n      initialTraffic: 10\n      trafficStep: 40\n      maxTraffic: 100\n      errorThreshold: 5\n  monitor:\n    pluginName: "prometheus"\n    config:\n      address: "http://prometheus-kube-prometheus-prometheus.monitoring.svc:9090"\n      queries:\n        - name: "request-success"\n          preset: "envoy-request-success"\n          min: 99\n        - name: "request-duration"\n          preset: "envoy-request-duration"\n          min: 20\n          max: 200\n')))}d.isMDXComponent=!0},3694:function(e,n,t){n.Z=t.p+"assets/images/app_1-1ff029d337dffcbaa58e06edc8e3243e.png"},720:function(e,n,t){n.Z=t.p+"assets/images/consul_1-cefa488e9e448b72bf9fd9e4bbf51a7b.png"},3959:function(e,n,t){n.Z=t.p+"assets/images/fake_service_1-f8d586abcfc990b6e09e9a90bfbb0cba.png"},1062:function(e,n,t){n.Z=t.p+"assets/images/grafana_1-5195f3c5c3c43df9e2b71e97c4211208.png"},4299:function(e,n,t){n.Z=t.p+"assets/images/grafana_2-92c8d8da51bb1bbf5b092dbf75d32a28.png"},7596:function(e,n,t){n.Z=t.p+"assets/images/grafana_3-3b8889201bac0a9e4ca003df7207cb5b.png"}}]);