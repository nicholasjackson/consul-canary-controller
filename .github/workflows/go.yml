name: Go

on: [push]

jobs:

  build_controller:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...

  check-kubebuilder:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Setup Kubebuilder
      run: |
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        # download kubebuilder and extract it to tmp
        curl -L https://github.com/kubernetes-sigs/kubebuilder/releases/download/v3.1.0/kubebuilder_linux_amd64 \
             -o /tmp/kubebuilder
        sudo mv /tmp/kubebuilder /usr/local/bin/kubebuilder
   
    - name: Check Kubebuilder can generate CRDs
      run: cd kubernetes/controller && make manifests
    
    - name: Check Kubebuilder can generate deep copy objects
      run: cd kubernetes/controller && make generate
   
  functional_tests:
    runs-on: ubuntu-latest
    needs:
      - build_controller
    strategy:
      matrix:
        tags:
          - "@k8s_canary_existing"
          - "@k8s_canary_none"
          - "@k8s_canary_rollback"
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Setup Functional Tests
      run: |
        curl https://shipyard.run/install | bash
    
    - name: Run Functional Tests
      run: |
        cd functional_tests && go run . --godog.tags="${{ matrix.tags }}"
      
    - name: Send status to Discord
      uses: sarisia/actions-status-discord@v1
      if: always()
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        description: "Executed functional test: ${{ matrix.tags }}"

  # Dev branch workflow
  dev_docker:
    name: Build development Docker image
    runs-on: ubuntu-latest
    needs:
      - build_controller
      - functional_tests
    if: ${{ github.ref == 'refs/heads/dev' }}

    steps:
    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASS }}

    - uses: actions/checkout@v2
      
    - name: Build and Push Docker Image
      run: |
        make build_docker
    
    - name: Send status to Discord
      uses: sarisia/actions-status-discord@v1
      if: always()
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        description: "Built new Docker image"

  # Main branch workflow
  check_labels:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v2

      - id: check_pr_labels
        name: Check PR labels
        uses: nicholasjackson/check-pr-labels-on-push-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          labels: '["patch", "minor", "major"]'
          match-any: 'true'

      - name: Send status to Discord
        if: ${{ steps.check_pr_labels.outputs.result == 'false' }}
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          description: "Not releasing new version, ensure that all PRs are labeled with a valid release label (patch, minor, major)"

    outputs:
      pr_labels_set: ${{ steps.check_pr_labels.outputs.result }}
      pr_first_label: ${{ fromJson(steps.check_pr_labels.outputs.labels)[0] }}

  publish_docs:
    name: Publish Docs
    runs-on: ubuntu-latest
    needs:
      - check_labels
    if: ${{ needs.check_labels.outputs.pr_labels_set == 'false' }}

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Build Docusaurus docs
      run: |
        echo "output ${{ needs.check_labels.outputs.pr_labels_set }}"
        cd docs
        yarn install
        yarn build

    - uses: actions/upload-artifact@v2
      with:
        name: docs
        path: docs/build

    - name: Deploy Github pages
      uses: JamesIves/github-pages-deploy-action@v4.2.3
      with:
        branch: gh-pages # The branch the action should deploy to.
        folder: docs/build # The folder the action should deploy.
    
    - name: Send status to Discord
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        description: "Published documentation"

  # Only release application if there is a valid label on the PR
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs:
      - check_labels
      - build_controller
      - functional_tests
    if: ${{ needs.check_labels.outputs.pr_labels_set == 'true' }}
    
    steps:
    - name: Set up Go 1.17
      uses: actions/setup-go@v2
      with:
        go-version: 1.17

    - name: Set up Node 14
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASS }}

    - uses: actions/checkout@v2

    - id: check_pr_labels
      uses: nicholasjackson/check-pr-labels-on-push-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        labels: '["patch", "minor", "major"]'
        match-any: 'true'

    - name: Send status to Discord
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        description: "Unable to release new version, ensure that all PRs are labeled with a valid release label (patch, minor, major)"
      
    - name: Bump version and push tag
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }} 
        dry_run: true
        default_bump: ${{ fromJson(steps.check_pr_labels.outputs.labels)[0] }}
     
    - name: Build and Push Docker Image
      run: |
        make build_docker
      env:
        VERSION_ENV: ${{ steps.tag_version.outputs.new_version }}
    
    - name: Generate the Helm release
      run: |
        make generate_helm
      env:
        VERSION_ENV: ${{ steps.tag_version.outputs.new_version }}

    - name: Commit changes
      uses: EndBug/add-and-commit@v8
      with:
        default_author: github_actions
        message: 'Update helm chart to version ${{ steps.tag_version.outputs.new_version }}'


    - name: Build Docusaurus docs
      run: |
        cd docs
        yarn install
        yarn build

    - uses: actions/upload-artifact@v2
      with:
        name: docs
        path: docs/build

    - name: Deploy Github pages
      uses: JamesIves/github-pages-deploy-action@v4.2.3
      with:
        branch: gh-pages # The branch the action should deploy to.
        folder: docs/build # The folder the action should deploy.
    
    - name: Bump version and push tag
      id: create_tag
      uses: mathieudutour/github-tag-action@v6.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }} 
        default_bump: ${{ fromJson(steps.check_pr_labels.outputs.labels)[0] }}

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag_version.outputs.new_tag }}
        token: ${{ secrets.GH_TOKEN }}
        files: | 
          ./consul-release-controller-${{ steps.tag_version.outputs.new_version }}.tgz

    
    - name: Send status to Discord
      uses: sarisia/actions-status-discord@v1
      if: always()
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        description: "Built new Docker image"